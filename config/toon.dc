from direct.distributed import DistributedObject/AI
from direct.distributed import TimeManager/AI
from direct.distributed import DistributedNode/AI/UD
from direct.distributed import DistributedSmoothNode/AI
from direct.distributed import DistributedObjectGlobal/AI/UD
from toontown.uberdog import AccountManager/UD
from toontown.ai import DistributedDistrict/AI
from toontown.avatar import DistributedAvatar/AI
from toontown.toon import DistributedToon/AI/UD
from toontown.uberdog import AvatarManager/UD
from toontown.city import DistributedLevel/AI

typedef uint8 bool;
typedef uint32 DoId;

struct BarrierData {
  uint16 context;
  string name;
  uint32 avIds[];
};

dclass DistributedObject {
  setBarrierData(BarrierData data[]) broadcast ram;
  setBarrierReady(uint16 context);
  setLocation(uint32 parentId, uint32 zoneId) broadcast ram;
};

dclass TimeManager: DistributedObject {
  requestServerTime(uint8 context) airecv clsend;
  serverTime(uint8 context, int32 timestamp);
};

dclass DistributedNode : DistributedObject {
  setParentStr(blob) broadcast ram clsend airecv;
  setParent(uint32) broadcast ram clsend airecv;
  setX(int16/10) broadcast ram clsend airecv;
  setY(int16/10) broadcast ram clsend airecv;
  setZ(int16/10) broadcast ram clsend airecv;
  setH(int16%360/10) broadcast ram clsend airecv;
  setP(int16%360/10) broadcast ram clsend airecv;
  setR(int16%360/10) broadcast ram clsend airecv;
  setPos : setX, setY, setZ;
  setHpr : setH, setP, setR;
  setPosHpr : setX, setY, setZ, setH, setP, setR;
  setXY : setX, setY;
  setXZ : setX, setZ;
  setXYH : setX, setY, setH;
  setXYZH : setX, setY, setZ, setH;
};

dclass DistributedSmoothNode : DistributedNode {
  setComponentL(uint64) broadcast ram clsend airecv;
  setComponentX(int16/10) broadcast ram clsend airecv;
  setComponentY(int16/10) broadcast ram clsend airecv;
  setComponentZ(int16/10) broadcast ram clsend airecv;
  setComponentH(int16%360/10) broadcast ram clsend airecv;
  setComponentP(int16%360/10) broadcast ram clsend airecv;
  setComponentR(int16%360/10) broadcast ram clsend airecv;
  setComponentT(int16) broadcast ram clsend airecv;
  setSmStop : setComponentT;
  setSmH : setComponentH, setComponentT;
  setSmZ : setComponentZ, setComponentT;
  setSmXY : setComponentX, setComponentY, setComponentT;
  setSmXZ : setComponentX, setComponentZ, setComponentT;
  setSmPos : setComponentX, setComponentY, setComponentZ, setComponentT;
  setSmHpr : setComponentH, setComponentP, setComponentR, setComponentT;
  setSmXYH : setComponentX, setComponentY, setComponentH, setComponentT;
  setSmXYZH : setComponentX, setComponentY, setComponentZ, setComponentH, setComponentT;
  setSmPosHpr : setComponentX, setComponentY, setComponentZ, setComponentH, setComponentP, setComponentR, setComponentT;
  setSmPosHprL : setComponentL, setComponentX, setComponentY, setComponentZ, setComponentH, setComponentP, setComponentR, setComponentT;
  clearSmoothing(int8) broadcast clsend;
  suggestResync(uint32, int16, int16, int32, uint16, uint16/100) ownrecv clsend;
  returnResync(uint32, int16, int32, uint16, uint16/100) ownrecv clsend;
};

dclass DistributedObjectGlobal: DistributedObject {
  
}

struct ToonObject {
  uint32 doId;
  string dnaString;
  string name;
};

dclass AccountManager: DistributedObjectGlobal {
  requestLogin(string token, string password, uint32 key) clsend;
  recieveAvatar(ToonObject[]);

  uint32[] ACCOUNT_AVATARS required db;
  string ACCOUNT_USERNAME required db;
  //string ACCOUNT_PASSWORD required db;
  string ACCOUNT_TIME_CREATED required db;
  string ACCOUNT_LAST_LOGIN required db;
};

dclass DistributedAvatar : DistributedObject {
};

dclass DistributedToon : DistributedAvatar, DistributedSmoothNode {
  setDNAString(string) required broadcast ownrecv db;
  setName(string) required broadcast ownrecv db;
  setAnimState(char [1-100]) broadcast ownsend ram airecv;
};

dclass DistributedDistrict : DistributedObject {
  setParentingRules(string, string) broadcast ram;
  setDistrictName(string) required broadcast ram;
  setDistrictType(uint8) required broadcast ram;
  setAvailable(uint8) required broadcast ram;
};

dclass AvatarManager : DistributedObjectGlobal {
  requestCreateAvatar(uint8, string, blob) clsend;
  createAvatarResponse(uint32);
  chooseAvatar(uint32) clsend;
};

struct LevelXYZHPR {
  int16/10 x;
  int16/10 y;
  int16/10 z;
  int16%360/10 h;
  int16%360/10 p;
  int16%360/10 r;
};

dclass DistributedLevel : DistributedNode {
  setLevelZoneId(uint32) required broadcast ram;
  setLevelModel(string) required broadcast ram;
  setLevelXYZHPR(int16/10, int16/10, int16/10, int16%360/10, int16%360/10, int16%360/10) required broadcast ram;
  requestEnter() clsend airecv;
  loadLevel();
};
