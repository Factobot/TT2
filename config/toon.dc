from direct.distributed import DistributedObject/AI
from direct.distributed import TimeManager/AI
from direct.distributed import DistributedNode/AI/UD
from direct.distributed import DistributedSmoothNode/AI
from direct.distributed import DistributedObjectGlobal/AI/UD
from toontown.uberdog import AccountManager/UD
from toontown.ai import DistributedDistrict/AI
from toontown.avatar import DistributedAvatar/AI/UD
from toontown.toon import DistributedToon/AI
from toontown.uberdog import AvatarManager/UD

typedef uint8 bool;
typedef uint32 DoId;

struct BarrierData {
  uint16 context;
  string name;
  uint32 avIds[];
};

dclass DistributedObject {
  setBarrierData(BarrierData data[]) broadcast ram;
  setBarrierReady(uint16 context);
  setLocation(uint32 parentId, uint32 zoneId) broadcast ram;
};

dclass TimeManager: DistributedObject {
  requestServerTime(uint8 context) airecv clsend;
  serverTime(uint8 context, int32 timestamp);
};

dclass DistributedNode: DistributedObject {
  setX(int16 / 10) broadcast ram;
  setY(int16 / 10) broadcast ram;
  setZ(int16 / 10) broadcast ram;
  setH(int16 % 360 / 10) broadcast ram;
  setP(int16 % 360 / 10) broadcast ram;
  setR(int16 % 360 / 10) broadcast ram;
  setPos: setX, setY, setZ;
  setHpr: setH, setP, setR;
  setPosHpr: setX, setY, setZ, setH, setP, setR;
  setXY: setX, setY;
  setXZ: setX, setZ;
  setXYH: setX, setY, setH;
  setXYZH: setX, setY, setZ, setH;
};

dclass DistributedSmoothNode: DistributedNode {
  setComponentL(uint64) broadcast ram;
  setComponentX(int16 / 10) broadcast ram;
  setComponentY(int16 / 10) broadcast ram;
  setComponentZ(int16 / 10) broadcast ram;
  setComponentH(int16 % 360 / 10) broadcast ram;
  setComponentP(int16 % 360 / 10) broadcast ram;
  setComponentR(int16 % 360 / 10) broadcast ram;
  setComponentT(int16 timestamp) broadcast ram;
  setSmStop: setComponentT;
  setSmH: setComponentH, setComponentT;
  setSmZ: setComponentZ, setComponentT;
  setSmXY: setComponentX, setComponentY, setComponentT;
  setSmXZ: setComponentX, setComponentZ, setComponentT;
  setSmPos: setComponentX, setComponentY, setComponentZ, setComponentT;
  setSmHpr: setComponentH, setComponentP, setComponentR, setComponentT;
  setSmXYH: setComponentX, setComponentY, setComponentH, setComponentT;
  setSmXYZH: setComponentX, setComponentY, setComponentZ, setComponentH, setComponentT;
  setSmPosHpr: setComponentX, setComponentY, setComponentZ, setComponentH, setComponentP, setComponentR, setComponentT;
  setSmPosHprL: setComponentL, setComponentX, setComponentY, setComponentZ, setComponentH, setComponentP, setComponentR, setComponentT;

  clearSmoothing(int8 bogus) broadcast;

  suggestResync(uint32 avId, int16 timestampA, int16 timestampB,
                int32 serverTimeSec, uint16 serverTimeUSec,
                uint16 / 100 uncertainty);
  returnResync(uint32 avId, int16 timestampB,
               int32 serverTimeSec, uint16 serverTimeUSec,
               uint16 / 100 uncertainty);
};

dclass DistributedObjectGlobal: DistributedObject {
  
}

struct ToonObject {
  string dnaString;
  string name;
  uint8 posIndex;
};

dclass AccountManager: DistributedObjectGlobal {
  requestLogin(string token, string password) clsend;
  recieveAvatar(ToonObject[]);

  uint32[] ACCOUNT_AVATARS required db;
  string ACCOUNT_USERNAME required db;
  string ACCOUNT_PASSWORD required db;
  string ACCOUNT_TIME_CREATED required db;
  string ACCOUNT_LAST_LOGIN required db;
};

dclass DistributedAvatar : DistributedObject {
};

dclass DistributedToon : DistributedAvatar, DistributedSmoothNode {
  setDNAString(blob) required broadcast ram db;
  setAnimState(char [1-100]) broadcast ownsend ram airecv;
};

dclass DistributedDistrict : DistributedObject {
  setDistrictName(string) required broadcast ram;
  setDistrictType(uint8) required broadcast ram;
  setAvailable(uint8) required broadcast ram;
};

dclass AvatarManager : DistributedObjectGlobal {
  requestCreateAvatar(uint8, string, blob) clsend;
  createAvatarResponse(uint32);
}